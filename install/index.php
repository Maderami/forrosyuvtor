<?php

use Bitrix\Main\Application;
use Bitrix\Main\Localization\Loc;
use \Bitrix\Main\Config;
use \Bitrix\Main\Config\Option;
use \Bitrix\Main\Loader;
use \Bitrix\Main\Entity\Base;

Loc::loadMessages(__FILE__);

class maindz_yas extends CModule
{
    var $exclusionAdminFiles;

    function __construct()
    {
        $arModuleVersion = array();
        include(__DIR__ . "/version.php");
        $this->exclusionAdminFiles = array(
            '..',
            '.',
            'menu.php',
            'operation_description.php',
            'task_description.php',
        );
 		$this->MODULE_ID = 'maindz.yas';
        $this->MODULE_DESCRIPTION = 'Модуль развертывания формы добавления заявок';
        $this->MODULE_NAME = 'Форма добавления заявок';
        $this->MODULE_SORT = 1;
        $this->MODULE_VERSION_DATE = $arModuleVersion['VERSION_DATE'];
        $this->MODULE_VERSION = $arModuleVersion['VERSION'];

        $this->PARTNER_NAME = 'Ярослав Садник';
        $this->PARTNER_URI = 'https://vk.com/id162580301';

        $this->SHOW_SUPER_ADMIN_GROUP_RIGHTS = 'Y';
        $this->MODULE_GROUP_RIGHTS = 'Y';

    }

    public function GetPath($notDocumentRoot = false)
    {
        if ($notDocumentRoot) {
            return str_ireplace(Application::getDocumentRoot(), '', dirname(__DIR__));
        } else {
            return dirname(__DIR__);
        }
    }

    public function isVersionD7()
    {
        return CheckVersion(\Bitrix\Main\ModuleManager::getVersion('main'), '14.00.00');
    }

    function UnInstallEvents()
    {
        \Bitrix\Main\EventManager::getInstance()->unregisterEventHandler($this->MODULE_ID, 'TestEventYaS', $this->MODULE_ID, '\MAINDZ\YAS\Event', 'eventHandler');
    }

    function InstallEvents()
    {
        \Bitrix\Main\EventManager::getInstance()->registerEventHandler($this->MODULE_ID, 'TestEventYaS', $this->MODULE_ID, '\MAINDZ\YAS\Event', 'eventHandler');
    }

    function InstallFiles()
    {
        $path = $this->GetPath() . "/install/components";
        if (\Bitrix\Main\IO\Directory::isDirectoryExists($path)) {
            CopyDirFiles($path, $_SERVER["DOCUMENT_ROOT"] . "/local/components", true, true);
        } else {
            throw new \Bitrix\Main\IO\InvalidPathException($path);
        }
        if (\Bitrix\Main\IO\Directory::isDirectoryExists($path = $this->GetPath() . "/admin")) {
            CopyDirFiles($this->GetPath() . "/install/admin", $_SERVER["DOCUMENT_ROOT"] . "/bitrix/admin", true, true);
            if ($dir = opendir($path)) {
                while (false !== $item = readdir($dir)) {
                    if (in_array($item, $this->exclusionAdminFiles)) {
                        continue;
                    }
                    file_put_contents($_SERVER["DOCUMENT_ROOT"] . "/bitrix/admin" . $this->MODULE_ID . '__' . $item,
                        '<' . '? require($_SERVER["DOCUMENT_ROOT"]."' . $this->GetPath(true) . 'admin/' . $item . '");?' . '>');
                }
                closedir($dir);
            }
        }
        return true;
    }

    function UnInstallFiles()
    {
        \Bitrix\Main\IO\Directory::deleteDirectory($_SERVER['DOCUMENT_ROOT'] . '/local/components/dz');
        if (\Bitrix\Main\IO\Directory::isDirectoryExists($path = $this->GetPath() . "/admin")) {
            DeleteDirFiles($_SERVER['DOCUMENT_ROOT'] . $this->GetPath() . '/install/admin/', $_SERVER['DOCUMENT_ROOT'] . '/bitrix/admin/');
            if ($dir = opendir($path)) {
                while (false !== $item = readdir($dir)) {
                    if (in_array($item, $this->exclusionAdminFiles)) {
                        continue;
                    }
                    \Bitrix\Main\IO\File::deleteFile($_SERVER['DOCUMENT_ROOT'] . '/bitrix/admin/' . $this->MODULE_ID . '__' . $item);
                }
                closedir($dir);
            }
        }
        return true;
    }

    function DoInstall()
    {
        // parent::DoInstall();  TODO: Change the autogenerated stub
        global $APPLICATION;
        if ($this->isVersionD7()) {

            \Bitrix\Main\ModuleManager::registerModule($this->MODULE_ID);
            $this->InstallDB();
            $this->InstallEvents();
            $this->InstallFiles();
            $this->AddIblockType();
            $iblockId = $this->AddIblockOR();
            $this->AddProp($iblockId);
            #Settings file .settings.php
            $configuration = Config\Configuration::getInstance();
            $maindz_module_yas = $configuration->get("maindz_module_yas");
            $maindz_module_yas['install'] = $maindz_module_yas['install'] + 1;
            $configuration->add('maindz_module_yas', $maindz_module_yas);
            $configuration->saveConfiguration();

        } else {
            $APPLICATION->ThrowException(Loc::getMessage("MAINDZ_YAS_INSTALL_ERROR_VERSION"));
        }

        $APPLICATION->IncludeAdminFile(Loc::getMessage("MAINDZ_YAS_INSTALL_TITLE"), $this->GetPath() . "/install/step.php");
    }

    function DoUninstall()
    {
        // parent::DoUninstall(); TODO: Change the autogenerated stub
        global $APPLICATION;
        $context = Application::getInstance()->getContext();
        $request = $context->getRequest();
        if ($request["step"] < 2) {
            $APPLICATION->IncludeAdminFile(Loc::getMessage("MAINDZ_YAS_UNINSTALL_TITLE"), $this->GetPath() . "/install/unstep1.php");
        } elseif ($request["step"] == 2) {
            $this->UnInstallEvents();
            $this->UnInstallFiles();

            if ($request['savedata'] != "Y") {
                $this->UnInstallDB();
                $this->DelIblocks();
            }

            \Bitrix\Main\ModuleManager::unregisterModule($this->MODULE_ID);
            #Settings file .settings.php
            $configuration = Config\Configuration::getInstance();
            $maindz_module_yas = $configuration->get("maindz_module_yas");
            $maindz_module_yas['uninstall'] = $maindz_module_yas['uninstall'] + 1;
            $configuration->add('maindz_module_yas', $maindz_module_yas);
            $configuration->saveConfiguration();

            $APPLICATION->IncludeAdminFile(Loc::getMessage("MAINDZ_YAS_UNINSTALL_TITLE"), $this->GetPath() . "/install/unstep2.php");
        }

    }

    public function AddIblockType()
    {

        global $DB;
        CModule::IncludeModule("iblock");

        // код для типа инфоблоков
        $iblockTypeCode = 'orders_iblock_type';

        // проверяем на уникальность
        $db_iblock_type = CIBlockType::GetList(
            array("SORT" => "ASC"),
            array("ID" => $iblockTypeCode)
        );
        // если его нет - создаём
        if (!$ar_iblock_type = $db_iblock_type->Fetch()) {
            $obBlocktype = new CIBlockType;
            $DB->StartTransaction();

            // массив полей для нового типа инфоблоков
            $arIBType = array(
                'ID' => $iblockTypeCode,
                'SECTIONS' => 'Y',
                'IN_RSS' => 'N',
                'SORT' => 500,
                'LANG' => array(
                    'en' => array(
                        'NAME' =>"Orderes",
                    ),
                    'ru' => array(
                        'NAME' => "Заявки",
                    )
                )
            );

            // создаём новый тип для инфоблоков
            $resIBT = $obBlocktype->Add($arIBType);
            if (!$resIBT) {
                $DB->Rollback();
                echo 'Error: ' . $obBlocktype->LAST_ERROR;
                die();
            } else {
                $DB->Commit();
            }
        } else {
            return false;
        }

        return $iblockTypeCode;
    }

    // функция для создания инфоблока
    public function AddIblockOR()
    {
        CModule::IncludeModule("iblock");

       // символьный код для инфоблока
        $iblockCodeOr = 'orders';

        $iblockType = 'orders_iblock_type'; // код типа инфоблоков

        $ib = new CIBlock;

        // проверка на уникальность
        $resIBEWH = CIBlock::GetList(
            array(),
            array(
                'TYPE' => $iblockType,
                "CODE" => $iblockCodeOr
            )
        );

        if ($ar_resIBE = $resIBEWH->Fetch()) {
            return false;
        } else {

            $arFieldsIB = array(
                "ACTIVE" => "Y",
                "NAME" => 'Заявки',
                "CODE" => $iblockCodeOr,
                "IBLOCK_TYPE_ID" => $iblockType,
                "SITE_ID" => "s1",
                "GROUP_ID" => array("2" => "R"),
                "FIELDS" => array(
                    "CODE" => array(
                        "IS_REQUIRED" => "Y",
                        "DEFAULT_VALUE" => array(
                            "TRANS_CASE" => "L",
                            "UNIQUE" => "Y",
                            "TRANSLITERATION" => "Y",
                            "TRANS_SPACE" => "-",
                            "TRANS_OTHER" => "-"
                        )
                    )
                )
            );
            return $ib->Add($arFieldsIB);
        }
    }
    //Создание полей для Заявки с привязкой к складам и брендам
    public function AddProp($IBLOCK_ID){
        CModule::IncludeModule("iblock");

        // массив полей для нового свойства
        $arFieldsProp = Array(
            "NAME" => "Брнед",
            "ACTIVE" => "Y",
            "SORT" => "100",
            "MULTIPLE" => "N",
            "CODE" => "BRANDS",
            "PROPERTY_TYPE" => "S",
            "USER_TYPE" => "UserB",
            "IBLOCK_ID" =>  $IBLOCK_ID
        );

        $ibp = new CIBlockProperty;

        // создаём свойство
        $propID = $ibp->Add($arFieldsProp);
		 // массив полей для нового свойства
        $arFieldsProp = Array(
            "NAME" => "Количество товара",
            "ACTIVE" => "Y",
            "SORT" => "100",
            "MULTIPLE" => "N",
            "CODE" => "COUNTFOODS",
            "PROPERTY_TYPE" => "S",
            "USER_TYPE" => "UserCF",
            "IBLOCK_ID" =>  $IBLOCK_ID
        );

        $ibp = new CIBlockProperty;

        // создаём свойство
        $propID = $ibp->Add($arFieldsProp);
		 // массив полей для нового свойства
        $arFieldsProp = Array(
            "NAME" => "Наименование товара",
            "ACTIVE" => "Y",
            "SORT" => "100",
            "MULTIPLE" => "N",
            "CODE" => "NAMEFOODS",
            "PROPERTY_TYPE" => "S",
            "USER_TYPE" => "UserNF",
            "IBLOCK_ID" =>  $IBLOCK_ID
        );

        $ibp = new CIBlockProperty;

        // создаём свойство
        $propID = $ibp->Add($arFieldsProp);

  // создаём свойство
        $propID = $ibp->Add($arFieldsProp);
		 // массив полей для нового свойства
        $arFieldsProp = Array(
            "NAME" => "Склад доставки",
            "ACTIVE" => "Y",
            "SORT" => "100",
            "MULTIPLE" => "N",
            "CODE" => "WEREHOME",
            "PROPERTY_TYPE" => "S",
            "USER_TYPE" => "UserIDWH",
            "IBLOCK_ID" =>  $IBLOCK_ID
        );

        $ibp = new CIBlockProperty;

        // создаём свойство
        $propID = $ibp->Add($arFieldsProp);
        return $propID;
    }
    // удаление данных инфоблоков
    public function DelIblocks(){
        global $DB;
        CModule::IncludeModule("iblock");

        $DB->StartTransaction();
        if (!CIBlockType::Delete($this->IBLOCK_TYPE)){
            $DB->Rollback();

            CAdminMessage::ShowMessage(Array(
                "TYPE" => "ERROR",
                "MESSAGE" => GetMessage("VTEST_IBLOCK_TYPE_DELETE_ERROR"),
                "DETAILS" => "",
                "HTML" => true
            ));
        }
        $DB->Commit();
    }
}
